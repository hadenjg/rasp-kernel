Copying last entry from notes and now keeping track here so I can develop away from home as well:

02/19/24 ----------------------------------------------------------------------------------------------------------------------------------
Got the device driver working and the device reads the sensor information correctly!  So the tutorial worked.
now I am going to write a device driver for the CAP1188 using i2c then spi

Then I am going to do the block device flash/eeprom thing i have.

Then once I have written all these device drivers.  I will implement them in a yocto build somehow or atleast learn how to do that.

because I don't want to do the yocto stuff now and wipe the harddrive for the raspberry pi. Cause then I'll jsut have to reflash it.

Right now I need to be able to transfer what I learned from the last device driver (the basic ideas)
then i need to implement communicating over i2c instead.. (and then spi)

https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/

https://learn.adafruit.com/adafruit-cap1188-breakout/pinouts

and then instead of make files figure out how to use cmake files
https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

Fuck the other things I posted.  It seems that the i2c device driver is already created (duh) and we just have to read/write to it like its a file....
 which makes me wonder what writing this device driver must be like?  
 although that shit is probably provided to us from manufactureres 
 liek for the ccu like shawn said

 https://elinux.org/Interfacing_with_I2C_Devices
 https://docs.kernel.org/i2c/writing-clients.html
https://learn.sparkfun.com/tutorials/i2c/all
https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf


https://elinux.org/Interfacing_with_I2C_Devices


04/05/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

https://pinout.xyz/
==============================

OK SINCE I DON"T REMEMBER ANYTHJING

start simple and just create the hello world version of this shit.  Then work on actually implementing the device....

To keep these notes updated... will have to upload them to github or something...


cool atleast we got make to work....


cleaned up repsoitory and rreacquainted myself with all this stuff.  Also got vs code to actually link to the linux kernel libraries

04/07/24-------------------------------------------------------------------------------------------------

After I get this working, get a yocto build for it and put that on another sd card??

04/08/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works
kernel.org/doc/html/v4.14/driver-api/i2c.html

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

github.com/torvalds/linux/blob/master/include/linux/i2c.h

upto date somewhat:
kernel.org/doc/html/latest/i2c/writing-clients.html

https://pinout.xyz/
==============================

finished following the guide.  Now going to try and understand what is actually going on..  (and i didn't implement the actual device.  I attempted to build as is, and it died as expected.

instead of probe you should use probe_new (probe is soon to be deprecated

"For automatic device detection, both detect and address_list must be defined. class should also be set"


///////////04/09/24

the guide has some outdated i2c commands in there.  The most uptodate stuff is in:
github.com/torvalds/linux/blob/master/include/linux/i2c.h

had to update i2c_new_device to i2c_new_client_device

also have to update the i2c_driver so that remove returns a void * to something instead of an int

today I was able to get the module to build with no errors.  It is still a skeleton with no functionality, but atleast it builds

///////////04/10/24

Ok so yesterday I got the skeleton together, today I will try to get some sort of info or atleast take the steps to get some sort of info from the chip onto the pi...

walking through init

after i2c_add_driver is called "all the i2c devices will be traversed.  Once matched, the probe function of the driver will be executed"

since this device can set leds as well as read info.  I guess the best thing to
do just to verify that I am communicating at all is to write a value to just turn the ledon and then off.  (upon inserting and removing the module)  That would be a good basic thing to do

So based on the CAP1188 pdf I should 

write to 00 for the main power control


reading through the data sheet....  Trying to figure out how to get an led to turn on

//////////04/15/2024

github.com/torvalds/linux/blob/master/drivers/input/keyboard/cap11xx.c

looks like its actaully already in the linux kernel lol
but i am having a hard time understanding exactly what they are doing since it is implementing not only CAP1188 but all CAP11xx devices.

module_i2c_driver() can replace module_init and module_exit

but I'll leave it in there for now:

To do:
1.) turn an led on and off
2.) eventually replace init and exit with module_i2c_driver()


ok led stuff:

5.31 led behavior registers

5.28 Led output control register (this may be how to do it (by default the leds are not
connected to the sensors))


04/16/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works
kernel.org/doc/html/v4.14/driver-api/i2c.html

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

github.com/torvalds/linux/blob/master/include/linux/i2c.h

upto date somewhat:
kernel.org/doc/html/latest/i2c/writing-clients.html

//seemingly correct way to go about this:
github.com/torvalds/linux/blob/master/drivers/input/keyboard/cap11xx.c

https://pinout.xyz/
==============================
TODO:
=============================
General Knowledge/Problems
============================
1.) Turn an led on XXXXXXXXX
2.) eventually replace __init and -_exit with module_i2c_driver()
3.) replace the manual operation of wrting with i2c to that regmap thing that was being done 
in the kernel code for cap11xx 
4.) investigate message "loading out-of-tree module taints kernel"
5.) look into difference between smbus and i2c

Then:
6.) Properly Initialize the device (have leds light up when sensors are touched and look at what other regs do)
7.) recieve the sensor information from device
8.) write user app that prints the sensor info to the screen
9.) upon shutdown have the device clear the registers
============================

Success!!!  
I was able to turn all the leds on the cap1188 device!!!  

 the tutorial I am following and what is actually written in the kernel are two very different beasts
the one in the kernel of course is looking for many different devices....

how to tell what is best practice???

Need to look into dbus message "loading out-of-tree module taints kernel."

Ok there does not seem to be any real place anywhere that has a definitive answer for any of this lol

Just have to keep cobbling and see what works and doesn't work lol.  

The skeleton is atleast the same.  Its just the interactions with the kernel that can change or have 
more streamlined ways of doing things....

ok now that I got it to atleast write to the led I can do some other stuff......

1.) Initialize the device
2.) recieve the sensor information from device
3.) write user app that prints the sensor info to the screen
4.) upon shutdown have the device clear the registers

1.) write a new module for spi version of doing it


04/17/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works
kernel.org/doc/html/v4.14/driver-api/i2c.html

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

github.com/torvalds/linux/blob/master/include/linux/i2c.h

upto date somewhat:
kernel.org/doc/html/latest/i2c/writing-clients.html

//seemingly correct way to go about this:
github.com/torvalds/linux/blob/master/drivers/input/keyboard/cap11xx.c

https://pinout.xyz/
==============================
TODO:
=============================
General Knowledge/Problems
============================
2.) eventually replace __init and -_exit with module_i2c_driver()
3.) replace the manual operation of wrting with i2c to that regmap thing that was being done 
in the kernel code for cap11xx 
4.) investigate message "loading out-of-tree module taints kernel" XXX

Then:
6.) Properly Initialize the device (have leds light up when sensors are touched and look at what other regs do)
7.) recieve the sensor information from device
8.) write user app that prints the sensor info to the screen (sysfs)
9.) upon shutdown have the device clear the registers

Extra:
5.) look into difference between smbus and i2c
10.)Try to use the inbuild kernel module for this chip and see what happens
11.) Create a developers blog about the journey so far?
============================

trying to figure out module_i2c_driver thing to get rid of boiler plate stuff.... it seems to insert the module, but my probe is not being called.....

What can I do to fix this??


//////04/19/24////////////

Was trying to get rid of the boiler plate stuff with "module_i2c_driver" but it was not working for whatever reason.  Possibly need to initialize the cap1188 i2c driver differently for it.  Either way I wasted enough time for now on it.  I'll come back later.  For now I will continue onto the next step


the tainted kernel thing can be ignored.  This is just for debugging purposes I guess, and is most likely caused by using propriety software in the linux kernel module I created..  and or its just not flagged as an intree module..  They say its fine to ignore

going to skip the reg map thing for now.  I just want to get the userspace code running and actually get the device to output some data first.  Then I can worry about optimizing all this stuff..

Looks like there are many ways for userspace to interact with kernel space.  3 listed in this website are (IOCTL, Sysfs, Procfs)

I will investigate all 3 and figuer out which one I would like to implement.  

I wonder what the one I used on the last device driver was?  


After reading it seems like i should be using sysfs to communicate with my kernel module.  or atleast I am unless this module needs to communicate with something else in procfs

/////04/20/24

looks like my i2c device is auto populated in the sys file system after it is inserted into the kernel lcoated here:
/sys/bus/i2c/devices/i2c-1/1-0029

so possibly i just need to add the "kobjects" that are mentioned here:

https://embetronicx.com/tutorials/linux/device-drivers/sysfs-in-linux-kernel/

getting confused the more i dig into this:

watching this video

https://www.youtube.com/watch?v=g9-wgdesvwA

//04/22/24/////


you need below .driver .id_table = "match_table"  //whatever in the i2c_driver for module i2c driver to work

static const struct of_device_id cap1188_of_match_table[] = {
{.compatible = "

look at the kernel code and compare to that i guess. (still didn't work... just ignore for now)

Should be regerstering this as some sort of framework and not just a new char device

nvm this is going to far down the rabbit hole.  Can't find any info on this whatsoever

https://stackoverflow.com/questions/41492850/does-i2c-driver-need-to-be-implemented-just-like-any-other-character-device-driv

page 221 -> 236
https://bootlin.com/doc/training/linux-kernel/linux-kernel-slides.pdf

-Just make the char device stuff so you can access it like a normal device driver.  Then if you feel
experimental try to figure out what this all means.  (looks like you will have to go reading through the kernel code to really figure any of this out)


04/23/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works
kernel.org/doc/html/v4.14/driver-api/i2c.html

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

github.com/torvalds/linux/blob/master/include/linux/i2c.h

upto date somewhat:
kernel.org/doc/html/latest/i2c/writing-clients.html

//seemingly correct way to go about this:
github.com/torvalds/linux/blob/master/drivers/input/keyboard/cap11xx.c

https://pinout.xyz/
==============================
TODO:
=============================
General Knowledge/Problems:
1.) eventually replace __init and -_exit with module_i2c_driver() (made multiple attempts putting on hold for now)
2.) replace the manual operation of wrting with i2c to that regmap thing that was being done 
in the kernel code for cap11xx 

Then:
1.) Properly Initialize the device (have leds light up when sensors are touched and look at what other regs do)
2.) recieve the sensor information from device
3.) write user app that prints the sensor info to the screen (sysfs)

Extra:
1.) Try to use the inbuild kernel module for this chip and see what happens
2.) Create a developers blog about the journey so far?
============================

OK so i got lost in those semantics for a couple of days.....  Ignore it all for now

Right now:
1.) make it accessible from the userspace by creating a dev file
2.) from user space make app to write to led

So how to abstract this?

When I am telling the chip to read/write should I be passing the register address to the driver or should the driver already know this????


DOWNLOAD VS CODE FOR THIS SINCE I AM DEVELOPING ON THE PI ANYWAY.  This is harder to read in vim/tmux and i am too lazy to rice it  and i tried neovim but that was deleting files


so if i just read* then how can i specifiy what sensor i want to read????
or do i just pass back all the info from every sensor??

ok so instead of doing any of that I will keep it all in the device driver..

Then I will expose the sensor data via /sysfs which can be read from 
then i will expose the led registers via the /sysfs which can be written to

So actionable to do list:
//////////////1.) get /sysfs led registers set up
//////////////2.) test to make sure they work in userspace 
3.) get sensor data reading to kernel module
4.) get /sysfs sensor data set up
5.) test sysfs in userspace
6.) read through documentation registers to see if I should be initializing the device any way better
7.) extra(add a gpio for reset so that I can reset the device on command/ during initialization)

Then i can move onto the yocto build of this or go onto spi stuff (if I am doing the yocto build, I will have to do it at my house.....)

This seems easy enough...

Just create global variables in the file that are read to and are updated

i guess this would only work for reading the sensor data...  

Once the device is probed have it go into a loop that is constantly reading all the sensor info one at a time and updates every variable...

Could not really tell it to write to an led.  And the speed might not be great now that it has to read
every sensor every time....

I think I'm ok on the speed I guess..

See if this works. I think this would be ok for reading the sensor data (monitoring)

However I think this would still need to have something else to write to the leds...  Perhaps this 
is what the ioctl should be used for...

I guess do one thing at a time for now..  (also may need to kick off reading from read rather than probe
so that this isn't stuck in an infinite loop it can't get out of until removed)

new to do:

1.) get sensor data reading to kernel module 
2.) get /sysfs sensor data set up
3.) test sysfs in userspace
4.) create a char device (don't do the infinite loop thing)
5.) add ioctl for write (have to figure out what info to pass between to know what led to write to I guess its jsut a value since it already knows the address of the leds... so i don't need to pass a struct or anything)
6.) have read , read all the registers 

extra
4.) read through documentation registers to see if I should be initializing the device any way better
7.) extra(add a gpio for reset so that I can reset the device on command/ during initialization)

////////04/24/24

Revised to do after thinking about it

1.) create char device
2.) test write
3.) setup read
4.) test read using 1 sensor
5.) change read to update multiple variables for /sysfs
6.) read sysfs from userspace


////////04/26/24

finished creating the char device and it shows up in /dev 

which is good.

Now I just need to read/write to it and see that it gives these messages just to verify
these funcitons are being accessed.

Then i can add in the funcitonality of each function

Next time:
add functionality into each function


///////04/29/24

I was able to successfully write to the device driver from the user space in python
(Not before crashing the pi lol, I had attempted to use the user space data before 
copying it over to kernel space)

Tomorrow:

1.)Write to it in a cpp program. 
2.)Figure out why its writing in a loop in the python program, and why you need to run it as sudo
3.) then see if you can read from it from both (just getting the print first then actually attemptingto read data)

////////04/30/24

wrote to it from a cpp program.  however it is also looping doing that even though it should only call it once...... and I still ahve to call from sudo...
it was writing in a loop because i wasn't returning valid values for successfull reads and writes
1.)Write to it in a cpp program. XXXXXXXXXXXXXXXXX
2.)Figure out why its writing in a loop in the python program XXXXXXXXXXXXXXXXXXXXXXXXXXXXkkkk
3.) and why you need to run it as sudo (putting off until tomorrow)
4.) then see if you can read from it from both (just getting the print first then actually attemptingto read data)

I attempted to read from the device and it crashed the Pi!!!  

Which is cool.  

Have to go in and figure out what is killing it:

Updated to do:

1.) figure out how to change permissions of your /dev file or add user to group 
2.) figure out how to read from the sensor


05/01/24-------------------------------------------------------------------------------------------------

==============================
Useful links:
==============================
https://embetronicx.com/linux-device-driver-tutorials/
https://embetronicx.com/tutorials/linux/device-drivers/i2c-linux-device-driver-using-raspberry-pi/#How_I2C_bus_driver_works
kernel.org/doc/html/v4.14/driver-api/i2c.html

https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/00001620C.pdf

github.com/torvalds/linux/blob/master/include/linux/i2c.h

upto date somewhat:
kernel.org/doc/html/latest/i2c/writing-clients.html

//seemingly correct way to go about this:
github.com/torvalds/linux/blob/master/drivers/input/keyboard/cap11xx.c

https://pinout.xyz/
==============================

Updated to do:

1.) figure out how to change permissions of your /dev file or add user to group 
2.) figure out how to read from the sensor


sudo chmod 777 /dev/CAP1188 

^ this allows you to read / write to the dev file (just like any other file)

Should probably have a specific group for that though..  JUST A FOR THOUGHT, for now it is ok though


next need to figure out how to read from this.

need to read the data sheet again.  Perhaps it is not writing anything to me until I set some sort of value first

or atleast I need to check a register to see if it is currently taking any measuremnt


To read it seems like you need to first write to the register just the address of the register you want to read, then read 

https://stackoverflow.com/questions/39409124/access-devices-register-i2c


OK I am going to attempt to read the register that I am writing to to control the LEDS!

That way I will know if I am actually reading the correct value or not.


////////05/03/24


I KEEP CRASHING THE PI LOLOLOL

send a better series of writes then send read???


HAHAHHA it worked!! I was able to read the register value by just first writing to the device the address of the register, then sending a read command!!

The reason it was crashing is because my cpp userpace program is complete ass!!!!

Need to figure out how to fix that shit..


Ok lol it is crashing my app A lot!!!!  Need to figure this out for sure..


SO far successful stuff:

1.) am able to write to cap1188 over i2c
2.) am able to write to cap1188 over i2c from user spcae using char device fops
3.) am able to read from cap188 over i2c

To do still:
1.) read from cap1188 over i2c from userspace
2.) create /sysdev or whatever it was called variables to be updated by read
3.) convert read to update all sysdev variables with readings from the sensors
4.) convert userspace to start the read process then actually read from sysproc or whatver it is called


then once all that is good I think I'll have the baseline for everything I really set out to accomplish for i2c stuff..

So then I can create the yocto build with this i2c application and make sure that works....

After all this:

1.) make yocto build with this i2c application 
2.) do this same thing but with smbus (don't need to do yocto build for this one)
3.) do this same thing but with spi (make yocto build just for practice)
4.) move onto the block device
5.) then once i finish the driver for the block device.  I can create a yocto build that interacts with both the block device and character device at the same time (first just on my pi)
like read the sensor data and store that info in the block device then powercycle and read the data back! 
6.) then move onto other os type enviroments like brad suggested

BUT FOR NOW:
read from cap1188 over i2c from userspace 



///////05/06/24

ok the read is still crashing from the user space.....

but atleast now with this example it is not crashing..  I can try and figure out what is going wrong now.
Some sort of overflow is occuring.

///////05/07/24

need to break this down to like one step at a time

1.) have some sort of string in the user space
2.) copy to kernel space and print out to verify that its the same value
3.) read the string we already have //value we want from register
4.) print that string /*register*/ value in kernel space
5.) then copy to user....

I guess we could even start with this example.


WE GOT IT!!!!

Interesting note:
if you return the size read and its 1 then the userspace program will say the read failed
but if the size is 2 then it says it passes???? 

//////05/09/24

^^^^Because of the null terminator ya dingus or maybe not.... idk

To do still:
1.) create /sysdev or whatever it was called variables to be updated by read XXXXXXXXXXXXX
2.) read sensor data
3.) create variables to be read from sysfs that hold sensor data 
3.) convert read to update all sysdev variables with readings from the sensors
4.) convert userspace to start the read process then actually read from sysproc or whatver it is called

created a sample variable in sysfs (hello world example)

Now to read sensor data and populate many variables with this 


//////05/13/24

Made my sysfs variable read only

now to actually read sensor info.

Will probably need to read the data sheet to see where that info is located

I created a sensor sysfs file and it is updated everytime the char device is read...
The problem I am seeing is that although the sysfs file is in fact updated everytime
I am unable to read this value from the C++ file.
Need to figure out how to get that value from sysfs into the user space

I'm not even sure this is the best practice at this point lol.......  But it will be a good learning experience at least